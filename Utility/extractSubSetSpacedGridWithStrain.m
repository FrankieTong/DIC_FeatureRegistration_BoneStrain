function [ grid_X, grid_Y, reducedGridWithStrain ] = extractSubSetSpacedGridWithStrain( postProcessorRawData, subsetSize )
%Input:
%postProcessorRawData - the result of loading data generated by
%   postprocessing DIC data, columns must contain the following:
%   - x,y,...,-13 total columns that by at least by default is 
%   {'x',' y',' u',' v',' C',' EPSxx',' EPSyy',' EPSxy',' OMEGAxy',' EPS1',' EPS2',' THETA',' Vol_Strain';}
%   Note:Function is desinged to work with data loaded from
    %POSTPRO_GUI_May_01_2008
%subsetSize - the size of the new nodes that are to be created in the
%   gridImage created

%Output:
%grid_X - image grid containing the x position of the nodes
%grid_Y - image grid containing the y position of the nodes
%reducedGridWithStrain - a 3d image with the columns (starting with the 3rd colum, ie skipping x,y) of image creating
%       slices of the 3d image with the grid match grid_x, grid_y and being
%       determined by subsetSize etc.


%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here
% load the workspace
% find the min and max of orig_gridX and orig_gridY
% find the subset size and space nodes subset sizes apart with nodes on the
% edges as well

%remove nodes with NaN as the value
postProcessWithoutNaN = removeRowsWithNaN(postProcessorRawData);

minXCoord = min(postProcessWithoutNaN(:,1));
maxXCoord = max(postProcessWithoutNaN(:,1));

minYCoord = min(postProcessWithoutNaN(:,2));
maxYCoord = max(postProcessWithoutNaN(:,2));


numXnodes = uint16((maxXCoord-minXCoord)/subsetSize +1);
numYnodes = uint16((maxYCoord-minYCoord)/subsetSize +1);

if numXnodes <2
    numXnodes = 2;
end
if numYnodes <2
    numYnodes = 2;
end

grid_X = ones(numYnodes,numXnodes);
grid_Y = ones(numYnodes,numXnodes);
reducedGridWithStrain = ones(numYnodes,numXnodes,11);

currentNode = 1;

for xInd = 1:numXnodes
    for yInd = 1:numYnodes
        grid_X(yInd,xInd) = (double(xInd)-1)*subsetSize+minXCoord;
        if grid_X(yInd,xInd) > maxXCoord
            grid_X(yInd,xInd) = maxXCoord;
        end
        grid_Y(yInd,xInd) = (double(yInd)-1)*subsetSize+minYCoord;
        if grid_Y(yInd,xInd) > maxYCoord
            grid_Y(yInd,xInd) = maxYCoord;
        end
        %while postProcessWithoutNaN(currentNode,1) < grid_X(yInd,xInd) || postProcessWithoutNaN(currentNode,2) < grid_Y(yInd,xInd)
        %    currentNode = currentNode + 1;
        %end
        for colInd = 3:13
            reducedGridWithStrain(yInd,xInd,colInd-2) = griddata(postProcessWithoutNaN(:,1),postProcessWithoutNaN(:,2),postProcessWithoutNaN(:,colInd),grid_X(yInd,xInd),grid_Y(yInd,xInd),'cubic');
        end
        %reducedGridWithStrain(yInd,xInd,:) = postProcessWithoutNaN(currentNode,3:13);
    end
end



end

